// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  password String
  userType String // Can be 'customer' or 'merchant'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  customer  Customer?
  merchant  Merchant?
}

model Customer {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName    String?  // Optional field
  lastName     String?  // Optional field
  address      String?  // Optional field
  address2     String?  // Optional field
  city         String?  // Optional field
  state        String?  // Optional field
  zipCode      String?  // Optional field
  phoneNumber  String?  // Optional field
  stripeCustomerId String? // Store Stripe customer ID
  stripePaymentMethodId String?
  balance      String?
  transactions          Transaction[] // New relation to Transaction model
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Merchant {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName          String?
  lnurl              String?
  connectedAccountId String?
  oneClickDiscount   Int      @default(2) // New field with default value
  transactions          Transaction[] // New relation to Transaction model
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Transaction {
  id            Int      @id @default(autoincrement())
  customerId    Int      // ID of the customer making the transaction
  customer      Customer   @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  merchantId    Int      // ID of the merchant involved in the transaction
  merchant      Merchant @relation(fields: [merchantId], references: [userId], onDelete: Cascade)
  amount        Float    // Transaction amount
  status        String   // Status of the transaction, e.g., 'pending', 'successful', 'failed'
  errorDetails  String?  // Additional error information if available
  paymentMethod String?  // Payment method used, e.g., 'stripe', 'coinbase'
  createdAt     DateTime @default(now()) // Time of transaction
}